{"version":3,"sources":["../../src/models/channel.js"],"names":["Channel","app","channels","OrderedMap","q","Promise","resolve","reject","db","collection","aggregate","err","results","options","find","toArray","id","_","toString","channelFromCache","get","findById","then","c","set","catch","findOne","_id","ObjectID","result","obj","idObject","members","each","value","key","memberObjectId","push","userIdObject","userId","channel","title","lastMessage","created","Date","insertOne","info","channelId"],"mappings":"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","file":"channel.js","sourcesContent":["import _ from 'lodash'\nimport {toString} from '../helper'\nimport {ObjectID} from 'mongodb'\nimport {OrderedMap} from 'immutable'\n\nexport default class Channel {\n\n    constructor(app) {\n\n        this.app = app;\n\n        this.channels = new OrderedMap();\n    }\n\n\n    aggregate(q){\n\n        return new Promise((resolve, reject) => {\n\n\n            this.app.db.collection('channels').aggregate(q, (err, results) => {\n\n\n                    return err ? reject(err) : resolve(results);\n\n            });\n\n\n        })\n\n    }\n    find(q, options = {}){\n\n\n\n        return new Promise((resolve, reject) => {\n\n\n            this.app.db.collection('channels').find(q, options).toArray((err, results) => {\n\n\n                return err ? reject(err) : resolve(results);\n            });\n\n\n        });\n    }\n    load(id) {\n\n        return new Promise((resolve, reject) => {\n\n\n            id = _.toString(id);\n\n\n            // first find in cache\n            const channelFromCache = this.channels.get(id);\n\n            if (channelFromCache) {\n\n\t\t\t\treturn resolve(channelFromCache);\n            }\n\n\n            // let find in db\n\n            this.findById(id).then((c) => {\n\n                this.channels = this.channels.set(id, c);\n                \n                return resolve(c);\n\n            }).catch((err) => {\n\n\n                return reject(err);\n            })\n\n\n\n        })\n\n    }\n\n    findById(id){\n\n        return new Promise((resolve, reject) => {\n\n\n            this.app.db.collection('channels').findOne({_id: new ObjectID(id)}, (err, result) => {\n\n                    if(err || !result){\n\n                        return reject(err ? err : \"Not found\");\n                    }\n\n                    return resolve(result);\n\n            });\n\n\n        })\n    }\n    create(obj) {\n\n\n        return new Promise((resolve, reject) => {\n\n            let id = toString(_.get(obj, '_id'));\n\n\n            let idObject = id ? new ObjectID(id) : new ObjectID();\n\n\n            let members = [];\n\n            _.each(_.get(obj, 'members', []), (value, key) => {\n\n\n                const memberObjectId = new ObjectID(key);\n                members.push(memberObjectId);\n            });\n\n\n            let userIdObject = null;\n\n            let userId = _.get(obj, 'userId', null);\n            if (userId) {\n                userIdObject = new ObjectID(userId);\n            }\n\n\n            const channel = {\n\n                _id: idObject,\n                title: _.get(obj, 'title', ''),\n                lastMessage: _.get(obj, 'lastMessage', ''),\n                created: new Date(),\n                userId: userIdObject,\n                members: members,\n            }\n\n\n            this.app.db.collection('channels').insertOne(channel, (err, info) => {\n\n                if (!err) {\n\n                    const channelId = channel._id.toString();\n\n                    this.channels = this.channels.set(channelId, channel);\n                }\n                return err ? reject(err) : resolve(channel);\n            });\n\n\n        });\n\n\n    }\n}"]}