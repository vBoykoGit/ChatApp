{"version":3,"sources":["../../src/models/user.js"],"names":["saltRound","User","app","users","OrderedMap","userId","isOnline","Promise","resolve","reject","update","user","online","query","_id","ObjectID","updater","$set","db","collection","err","info","options","find","toArray","q","regex","RegExp","$or","name","$regex","email","created","results","length","message","_","get","password","findUserByEmail","result","hashPassword","isMatch","bcrypt","compareSync","models","token","create","then","catch","callback","findOne","id","userInCache","findUserById","set","errors","fields","validations","errorMesage","do","forEach","field","fieldValidation","isValid","msg","push","join","toLower","trim","hashSync","userFormatted","Date","console","log","beforeSave","insertOne","toString"],"mappings":"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","file":"user.js","sourcesContent":["import _ from 'lodash'\nimport {isEmail} from '../helper'\nimport bcrypt from 'bcrypt'\nimport {ObjectID} from 'mongodb'\nimport {OrderedMap} from 'immutable'\n\nconst saltRound = 10;\n\nexport default class User {\n\n    constructor(app) {\n\n        this.app = app;\n\n        this.users = new OrderedMap();\n\n    }\n\n    updateUserStatus(userId, isOnline = false) {\n\n        return new Promise((resolve, reject) => {\n\n            // first update status of cache this.users\n\n\n            this.users = this.users.update(userId, (user) => {\n\n                if (user) {\n                    user.online = isOnline;\n                }\n\n                return user;\n            });\n\n            const query = {_id: new ObjectID(userId)};\n            const updater = {$set: {online: isOnline}};\n            this.app.db.collection('users').update(query, updater, (err, info) => {\n                return err ? reject(err) : resolve(info);\n            });\n\n\n        })\n    }\n\n    find(query = {}, options = {}) {\n\n\n        return new Promise((resolve, reject) => {\n\n            this.app.db.collection('users').find(query, options).toArray((err, users) => {\n\n                return err ? reject(err) : resolve(users);\n            })\n\n        });\n    }\n\n    search(q = \"\") {\n\n        return new Promise((resolve, reject) => {\n\n\n            const regex = new RegExp(q, 'i');\n\n            const query = {\n                $or: [\n                    {name: {$regex: regex}},\n                    {email: {$regex: regex}},\n                ],\n            };\n\n            this.app.db.collection('users').find(query, {\n                _id: true,\n                name: true,\n                created: true\n            }).toArray((err, results) => {\n\n\n                if (err || !results || !results.length) {\n\n                    return reject({message: \"User not found.\"})\n                }\n\n                return resolve(results);\n            });\n\n\n        });\n    }\n\n    login(user) {\n\n        const email = _.get(user, 'email', '');\n        const password = _.get(user, 'password', '');\n\n\n        return new Promise((resolve, reject) => {\n\n\n            if (!password || !email || !isEmail(email)) {\n                return reject({message: \"An error login.\"})\n            }\n\n\n            // find in database with email\n\n            this.findUserByEmail(email, (err, result) => {\n\n\n                if (err) {\n\n                    return reject({message: \"Login Error.\"});\n                }\n\n\n                // if found user we have to compare the password hash and plain text.\n\n\n                const hashPassword = _.get(result, 'password');\n\n                const isMatch = bcrypt.compareSync(password, hashPassword);\n\n\n                if (!isMatch) {\n\n                    return reject({message: \"Login Error.\"});\n                }\n\n                // user login successful let creat new token save to token collection.\n\n                const userId = result._id;\n\n                this.app.models.token.create(userId).then((token) => {\n\n                    token.user = result;\n\n                    return resolve(token);\n\n                }).catch(err => {\n\n                    return reject({message: \"Login error\"});\n                })\n\n\n            });\n\n\n        })\n\n\n    }\n\n    findUserByEmail(email, callback = () => {\n    }) {\n\n\n        this.app.db.collection('users').findOne({email: email}, (err, result) => {\n\n            if (err || !result) {\n\n                return callback({message: \"User not found.\"})\n            }\n\n            return callback(null, result);\n\n        });\n\n\n    }\n\n    load(id) {\n\n\n        id = `${id}`;\n\n        return new Promise((resolve, reject) => {\n\n            // find in cache if found we return and dont nee to query db\n\n            const userInCache = this.users.get(id);\n\n\n            if (userInCache) {\n                return resolve(userInCache);\n            }\n\n            // if not found then we start query db\n            this.findUserById(id, (err, user) => {\n\n                if (!err && user) {\n\n\n                    this.users = this.users.set(id, user);\n                }\n\n                return err ? reject(err) : resolve(user);\n\n            })\n\n\n        })\n    }\n\n    findUserById(id, callback = () => {\n    }) {\n\n        //console.log(\"Begin query in database\");\n\n        if (!id) {\n            return callback({message: \"User not found\"}, null);\n        }\n\n\n        const userId = new ObjectID(id);\n\n        this.app.db.collection('users').findOne({_id: userId}, (err, result) => {\n\n\n            if (err || !result) {\n\n                return callback({message: \"User not found\"});\n            }\n            return callback(null, result);\n\n        });\n    }\n\n    beforeSave(user, callback = () => {\n    }) {\n\n\n        // first is validate user object before save to user collection.\n\n        let errors = [];\n\n\n        const fields = ['name', 'email', 'password'];\n        const validations = {\n            name: {\n                errorMesage: 'Name is required',\n                do: () => {\n\n                    const name = _.get(user, 'name', '');\n\n                    return name.length;\n                }\n            },\n            email: {\n                errorMesage: 'Email is not correct',\n                do: () => {\n\n                    const email = _.get(user, 'email', '');\n\n                    if (!email.length || !isEmail(email)) {\n                        return false;\n                    }\n\n\n                    return true;\n                }\n            },\n            password: {\n                errorMesage: 'Password is required and more than 3 characters',\n                do: () => {\n                    const password = _.get(user, 'password', '');\n\n                    if (!password.length || password.length < 3) {\n\n                        return false;\n                    }\n\n                    return true;\n                }\n            }\n        }\n\n\n        // loop all fields to check if valid or not.\n        fields.forEach((field) => {\n\n\n            const fieldValidation = _.get(validations, field);\n\n            if (fieldValidation) {\n\n                // do check/\n\n                const isValid = fieldValidation.do();\n                const msg = fieldValidation.errorMesage;\n\n                if (!isValid) {\n                    errors.push(msg);\n                }\n            }\n\n\n        });\n\n        if (errors.length) {\n\n            // this is not pass of the validation.\n            const err = _.join(errors, ',');\n            return callback(err, null);\n        }\n\n        // check email is exist in db or not\n        const email = _.toLower(_.trim(_.get(user, 'email', '')));\n\n        this.app.db.collection('users').findOne({email: email}, (err, result) => {\n\n            if (err || result) {\n                return callback({message: \"Email is already exist\"}, null);\n            }\n\n\n            // return callback with succes checked.\n            const password = _.get(user, 'password');\n            const hashPassword = bcrypt.hashSync(password, saltRound);\n\n            const userFormatted = {\n                name: `${_.trim(_.get(user, 'name'))}`,\n                email: email,\n                password: hashPassword,\n                created: new Date(),\n            };\n\n\n            return callback(null, userFormatted);\n\n\n        });\n\n\n    }\n\n    create(user) {\n\n        const db = this.app.db;\n\n        console.log(\"User:\", user)\n\n        return new Promise((resolve, reject) => {\n\n\n            this.beforeSave(user, (err, user) => {\n\n\n                console.log(\"After validation: \", err, user);\n\n\n                if (err) {\n                    return reject(err);\n                }\n\n\n                // insert new user object to users collections\n\n                db.collection('users').insertOne(user, (err, info) => {\n\n\n                    // check if error return error to user\n                    if (err) {\n                        return reject({message: \"An error saving user.\"});\n                    }\n\n                    // otherwise return user object to user.\n\n                    const userId = _.get(user, '_id').toString(); // this is OBJET ID\n\n\n                    this.users = this.users.set(userId, user);\n\n                    return resolve(user);\n\n                });\n\n            });\n\n\n        });\n    }\n}"]}