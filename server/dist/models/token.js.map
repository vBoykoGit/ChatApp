{"version":3,"sources":["../../src/models/token.js"],"names":["Token","app","tokens","OrderedMap","token","Promise","resolve","reject","tokenId","_","toString","_id","remove","db","collection","ObjectID","err","info","id","load","then","userId","models","user","catch","tokenFromCache","get","findTokenById","set","cb","idObject","query","findOne","result","message","created","Date","insertOne"],"mappings":"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","file":"token.js","sourcesContent":["import _ from 'lodash'\nimport {ObjectID} from 'mongodb'\nimport {OrderedMap} from 'immutable'\n\nexport default class Token{\n\n\tconstructor(app){\n\n\t\tthis.app = app;\n\n\n\t\tthis.tokens = new OrderedMap();\n\n\t}\n\n    logout(token){\n\n\t\treturn new Promise((resolve, reject) => {\n\n            const tokenId = _.toString(token._id);\n            // to remove token from cache\n            this.tokens = this.tokens.remove(tokenId);\n            // we have to delete this token id from tokens collection\n\n            this.app.db.collection('tokens').remove({_id: new ObjectID(tokenId)}, (err, info) => {\n\n\t\t\t\t\treturn err ? reject(err) : resolve(info);\n            });\n\n\t\t})\n\n\t}\n\tloadTokenAndUser(id){\n\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tthis.load(id).then((token) => {\n\n\t\t\t\n\t\t\t\tconst userId = `${token.userId}`\n\n\t\t\t\tthis.app.models.user.load(userId).then((user) => {\n\n\t\t\t\t\ttoken.user = user;\n\t\t\t\t\treturn resolve(token);\n\n\t\t\t\t}).catch(err => {\n\n\t\t\t\t\treturn reject(err);\n\n\t\t\t\t});\n\n\n\t\t\t}).catch((err) => {\n\t\t\t\treturn reject(err);\n\t\t\t});\n\n\n\t\t})\n\t}\n\n\tload(id = null){\n\n\n\t\tid = `${id}`;\n\n\n\n\n\t\treturn new Promise((resolve, reject) => {\n\n\n\t\t\t// first we check in cache if found dont need to query to database.\n\n\t\t\tconst tokenFromCache = this.tokens.get(id);\n\t\t\tif(tokenFromCache){\n\n\t\t\t\treturn resolve(tokenFromCache);\n\t\t\t}\n\n\t\t\tthis.findTokenById(id, (err, token) => {\n\n\t\t\t\tif(!err && token){\n\n\t\t\t\t\tconst tokenId = token._id.toString();\n\n\t\t\t\t\tthis.tokens = this.tokens.set(tokenId, token);\n\n\t\t\t\t}\n\t\t\t\treturn err ? reject(err) : resolve(token);\n\n\t\t\t});\n\t\t})\n\t}\n\n\tfindTokenById(id, cb = () => {}){\n\n\n\t\t//console.log(\"Begin query into database!!!!!!\");\n\n\n\t\tconst idObject = new ObjectID(id);\n\t\n\t\tconst query = {_id: idObject}\n\t\tthis.app.db.collection('tokens').findOne(query, (err, result) => {\n\n\t\t\tif(err || !result){\n\n\t\t\t\treturn cb({message: \"Not found\"}, null);\n\t\t\t}\n\n\n\t\t\treturn cb(null, result);\n\n\t\t})\n\t}\n\n\tcreate(userId){\n\n\t\tconst token = {\n\t\t\tuserId: userId,\n\t\t\tcreated: new Date(),\n\t\t}\n\n\t\t\n\t\treturn new Promise((resolve, reject) => {\n\n\n\t\t\tthis.app.db.collection('tokens').insertOne(token, (err, info) => {\n\t\t\t\treturn err ? reject(err) : resolve(token);\n\t\t\t})\n\n\n\n\t\t})\n\t}\n\n\n\n}"]}