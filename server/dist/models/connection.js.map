{"version":3,"sources":["../../src/models/connection.js"],"names":["Connection","app","connections","modelDidLoad","msg","messageObject","JSON","parse","err","console","log","userId","obj","query","$match","members","$all","ObjectID","$lookup","from","localField","foreignField","as","$unwind","path","$eq","$group","_id","users","db","collection","aggregate","results","_","each","result","uid","toString","get","push","memberConnections","filter","con","includes","size","forEach","connection","key","ws","send","message","stringify","socketId","action","payload","userConnection","isAuthenticated","models","create","then","channelId","channel","load","memberIds","memberId","c","catch","chanelObject","$in","queryOptions","name","created","user","find","id","memberConnection","userTokenId","token","loadTokenAndUser","set","userIdString","sendToMembers","updateUserStatus","wss","on","clientConnection","decodeMesasge","doTheJob","closeConnection","remove","userConnections"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;IAEqBA,U;AAEjB,wBAAYC,GAAZ,EAAiB;AAAA;;AAEb,aAAKA,GAAL,GAAWA,GAAX;;AAEA,aAAKC,WAAL,GAAmB,4BAAnB;;AAEA,aAAKC,YAAL;AACH;;;;sCAGaC,G,EAAK;;AAGf,gBAAIC,gBAAgB,IAApB;;AAGA,gBAAI;;AAEAA,gCAAgBC,KAAKC,KAAL,CAAWH,GAAX,CAAhB;AACH,aAHD,CAIA,OAAOI,GAAP,EAAY;;AAERC,wBAAQC,GAAR,CAAY,mCAAZ,EAAiDN,GAAjD;AACH;;AAGD,mBAAOC,aAAP;AAEH;;;sCAEaM,M,EAAQC,G,EAAK;AAAA;;AAEvB,gBAAMC,QAAQ,CACV;AACIC,wBAAQ;;AAEJC,6BAAS,EAACC,MAAM,CAAC,IAAIC,iBAAJ,CAAaN,MAAb,CAAD,CAAP;AAFL;AADZ,aADU,EAOV;;AAEIO,yBAAS;;AAELC,0BAAM,OAFD;AAGLC,gCAAY,SAHP;AAILC,kCAAc,KAJT;AAKLC,wBAAI;AALC;AAFb,aAPU,EAiBV;AACIC,yBAAS;;AAELC,0BAAM;AAFD;AADb,aAjBU,EAuBV;AACIV,wBAAQ,EAAC,gBAAgB,EAACW,KAAK,IAAN,EAAjB;AADZ,aAvBU,EA0BV;AACIC,wBAAQ;;AAEJC,yBAAK;AAFD;AADZ,aA1BU,CAAd;;AAqCA,gBAAMC,QAAQ,EAAd;;AAGA,iBAAK3B,GAAL,CAAS4B,EAAT,CAAYC,UAAZ,CAAuB,UAAvB,EAAmCC,SAAnC,CAA6ClB,KAA7C,EAAoD,UAACL,GAAD,EAAMwB,OAAN,EAAkB;;AAGnE;AACC,oBAAIxB,QAAQ,IAAR,IAAgBwB,OAApB,EAA6B;;AAEzBC,qCAAEC,IAAF,CAAOF,OAAP,EAAgB,UAACG,MAAD,EAAY;;AAGxB,4BAAMC,MAAMH,iBAAEI,QAAF,CAAWJ,iBAAEK,GAAF,CAAMH,MAAN,EAAc,KAAd,CAAX,CAAZ;AACA,4BAAIC,GAAJ,EAAS;AACLR,kCAAMW,IAAN,CAAWH,GAAX;AACH;AACJ,qBAPD;;AAUA;AACA,wBAAMI,oBAAoB,MAAKtC,WAAL,CAAiBuC,MAAjB,CAAwB,UAACC,GAAD;AAAA,+BAAST,iBAAEU,QAAF,CAAWf,KAAX,EAAkBK,iBAAEI,QAAF,CAAWJ,iBAAEK,GAAF,CAAMI,GAAN,EAAW,QAAX,CAAX,CAAlB,CAAT;AAAA,qBAAxB,CAA1B;AACA,wBAAIF,kBAAkBI,IAAtB,EAA4B;;AAExBJ,0CAAkBK,OAAlB,CAA0B,UAACC,UAAD,EAAaC,GAAb,EAAqB;;AAE3C,gCAAMC,KAAKF,WAAWE,EAAtB;AACA,kCAAKC,IAAL,CAAUD,EAAV,EAAcpC,GAAd;AACH,yBAJD;AAKH;AAGJ;AACJ,aA7BD;AA8BH;;;gCAEOA,G,EAAK;AAAA;;AAGT;;AAEA,iBAAKV,WAAL,CAAiB2C,OAAjB,CAAyB,UAACH,GAAD,EAAMK,GAAN,EAAc;AACnC,oBAAMC,KAAKN,IAAIM,EAAf;;AAEA,uBAAKC,IAAL,CAAUD,EAAV,EAAcpC,GAAd;AACH,aAJD;AAKH;;;6BAEIoC,E,EAAIpC,G,EAAK;;AAEV,gBAAMsC,UAAU5C,KAAK6C,SAAL,CAAevC,GAAf,CAAhB;;AAEAoC,eAAGC,IAAH,CAAQC,OAAR;AACH;;;iCAEQE,Q,EAAUhD,G,EAAK;AAAA;;AAGpB,gBAAMiD,SAASpB,iBAAEK,GAAF,CAAMlC,GAAN,EAAW,QAAX,CAAf;AACA,gBAAMkD,UAAUrB,iBAAEK,GAAF,CAAMlC,GAAN,EAAW,SAAX,CAAhB;AACA,gBAAMmD,iBAAiB,KAAKrD,WAAL,CAAiBoC,GAAjB,CAAqBc,QAArB,CAAvB;;AAEA3C,oBAAQC,GAAR,CAAY,aAAZ,EAA2BN,GAA3B;;AAEA,oBAAQiD,MAAR;;AAGI,qBAAK,gBAAL;;AAEI,wBAAIE,eAAeC,eAAnB,EAAoC;AAChC,4BAAInD,gBAAgBiD,OAApB;;AAEAjD,sCAAcM,MAAd,GAAuBsB,iBAAEK,GAAF,CAAMiB,cAAN,EAAsB,QAAtB,CAAvB;AACA9C,gCAAQC,GAAR,CAAY,oDAAZ,EAAkE4C,OAAlE;;AAEA,6BAAKrD,GAAL,CAASwD,MAAT,CAAgBP,OAAhB,CAAwBQ,MAAxB,CAA+BrD,aAA/B,EAA8CsD,IAA9C,CAAmD,UAACT,OAAD,EAAa;;AAG5DzC,oCAAQC,GAAR,CAAY,iBAAZ,EAA+BwC,OAA/B;;AAEA,gCAAMU,YAAY3B,iBAAEI,QAAF,CAAWJ,iBAAEK,GAAF,CAAMY,OAAN,EAAe,WAAf,CAAX,CAAlB;AACA,mCAAKjD,GAAL,CAASwD,MAAT,CAAgBI,OAAhB,CAAwBC,IAAxB,CAA6BF,SAA7B,EAAwCD,IAAxC,CAA6C,UAACE,OAAD,EAAa;;AAEtD;;AAEA,oCAAME,YAAY9B,iBAAEK,GAAF,CAAMuB,OAAN,EAAe,SAAf,EAA0B,EAA1B,CAAlB;;AAEA5B,iDAAEC,IAAF,CAAO6B,SAAP,EAAkB,UAACC,QAAD,EAAc;;AAE5BA,+CAAW/B,iBAAEI,QAAF,CAAW2B,QAAX,CAAX;;AAEA,wCAAMxB,oBAAoB,OAAKtC,WAAL,CAAiBuC,MAAjB,CAAwB,UAACwB,CAAD;AAAA,+CAAOhC,iBAAEI,QAAF,CAAW4B,EAAEtD,MAAb,MAAyBqD,QAAhC;AAAA,qCAAxB,CAA1B;;AAGAxB,sDAAkBK,OAAlB,CAA0B,UAACC,UAAD,EAAgB;;AAGtC,4CAAME,KAAKF,WAAWE,EAAtB;;AAEA,+CAAKC,IAAL,CAAUD,EAAV,EAAc;;AAEVK,oDAAQ,eAFE;AAGVC,qDAASJ;AAHC,yCAAd;AAOH,qCAZD;AAeH,iCAtBD;AAuBH,6BA7BD;;AA+BA;;AAGH,yBAxCD,EAwCGgB,KAxCH,CAwCS,eAAO;;AAGZ;AACA,gCAAMlB,KAAKO,eAAeP,EAA1B;AACA,mCAAKC,IAAL,CAAUD,EAAV,EAAc;AACVK,wCAAQ,sBADE;AAEVC,yCAASA;AAFC,6BAAd;AAIH,yBAjDD;AAkDH;;AAGD;AACJ,qBAAK,gBAAL;;AAEI,wBAAIO,UAAUP,OAAd;;AAGA,wBAAM3C,SAAS4C,eAAe5C,MAA9B;AACAkD,4BAAQlD,MAAR,GAAiBA,MAAjB;;AAEA,yBAAKV,GAAL,CAASwD,MAAT,CAAgBI,OAAhB,CAAwBH,MAAxB,CAA+BG,OAA/B,EAAwCF,IAAxC,CAA6C,UAACQ,YAAD,EAAkB;;AAE3D;;AAEA1D,gCAAQC,GAAR,CAAY,+BAAZ,SAAoDC,MAApD,yCAAoDA,MAApD,GAA4DwD,YAA5D;;AAEA;AACA,4BAAI3B,oBAAoB,EAAxB;;AAEA,4BAAMuB,YAAY9B,iBAAEK,GAAF,CAAM6B,YAAN,EAAoB,SAApB,EAA+B,EAA/B,CAAlB;;AAEA;;AAEA,4BAAMtD,QAAQ;AACVc,iCAAK,EAACyC,KAAKL,SAAN;AADK,yBAAd;;AAIA,4BAAMM,eAAe;AACjB1C,iCAAK,CADY;AAEjB2C,kCAAM,CAFW;AAGjBC,qCAAS;AAHQ,yBAArB;;AAMA,+BAAKtE,GAAL,CAASwD,MAAT,CAAgBe,IAAhB,CAAqBC,IAArB,CAA0B5D,KAA1B,EAAiCwD,YAAjC,EAA+CV,IAA/C,CAAoD,UAAC/B,KAAD,EAAW;AAC3DuC,yCAAavC,KAAb,GAAqBA,KAArB;;AAGAK,6CAAEC,IAAF,CAAO6B,SAAP,EAAkB,UAACW,EAAD,EAAQ;;AAEtB,oCAAM/D,SAAS+D,GAAGrC,QAAH,EAAf;AACA,oCAAMsC,mBAAmB,OAAKzE,WAAL,CAAiBuC,MAAjB,CAAwB,UAACC,GAAD;AAAA,2CAAS,KAAGA,IAAI/B,MAAP,KAAoBA,MAA7B;AAAA,iCAAxB,CAAzB;;AAEA,oCAAIgE,iBAAiB/B,IAArB,EAA2B;AACvB+B,qDAAiB9B,OAAjB,CAAyB,UAACH,GAAD,EAAS;;AAE9B,4CAAMM,KAAKN,IAAIM,EAAf;AACA,4CAAMpC,MAAM;AACRyC,oDAAQ,eADA;AAERC,qDAASa;;AAGb;AALY,yCAAZ,CAMA,OAAKlB,IAAL,CAAUD,EAAV,EAAcpC,GAAd;AAEH,qCAXD;AAcH;AAGJ,6BAvBD;AAyBH,yBA7BD;;AAgCA;;AAGH,qBA1DD;;AA4DA;;;AAGA;;AAEJ,qBAAK,MAAL;;AAEI,wBAAMgE,cAActB,OAApB;AACA,wBAAIR,aAAa,KAAK5C,WAAL,CAAiBoC,GAAjB,CAAqBc,QAArB,CAAjB;;AAEA,wBAAIN,UAAJ,EAAgB;;AAIZ;;AAEA,6BAAK7C,GAAL,CAASwD,MAAT,CAAgBoB,KAAhB,CAAsBC,gBAAtB,CAAuCF,WAAvC,EAAoDjB,IAApD,CAAyD,UAACkB,KAAD,EAAW;;AAEhE,gCAAMlE,SAASkE,MAAMlE,MAArB;;AAEAmC,uCAAWU,eAAX,GAA6B,IAA7B;AACAV,uCAAWnC,MAAX,QAAuBA,MAAvB;;AAEA,mCAAKT,WAAL,GAAmB,OAAKA,WAAL,CAAiB6E,GAAjB,CAAqB3B,QAArB,EAA+BN,UAA/B,CAAnB;;AAEA;AACA,gCAAMlC,MAAM;AACRyC,wCAAQ,cADA;AAERC,yCAAS;AAFD,6BAAZ;AAIA,mCAAKL,IAAL,CAAUH,WAAWE,EAArB,EAAyBpC,GAAzB;;AAEA;;AAEA,gCAAMoE,eAAe/C,iBAAEI,QAAF,CAAW1B,MAAX,CAArB;AACA,mCAAKsE,aAAL,CAAmBD,YAAnB,EAAiC;AAC7B3B,wCAAQ,aADqB;AAE7BC,yCAAS0B;AAFoB,6BAAjC;;AAKA,mCAAK/E,GAAL,CAASwD,MAAT,CAAgBe,IAAhB,CAAqBU,gBAArB,CAAsCF,YAAtC,EAAoD,IAApD;AAGH,yBA3BD,EA2BGd,KA3BH,CA2BS,UAAC1D,GAAD,EAAS;;AAGd;AACA,gCAAMI,MAAM;AACRyC,wCAAQ,YADA;AAERC,yCAAS,2CAA2CsB;AAF5C,6BAAZ;;AAKA,mCAAK3B,IAAL,CAAUH,WAAWE,EAArB,EAAyBpC,GAAzB;AAEH,yBAtCD;AAyCH;;AAGD;;AAEJ;;AAEI;AArMR;AAuMH;;;uCAEc;AAAA;;AAEX,iBAAKX,GAAL,CAASkF,GAAT,CAAaC,EAAb,CAAgB,YAAhB,EAA8B,UAACpC,EAAD,EAAQ;;AAElC,oBAAMI,WAAW,IAAInC,iBAAJ,GAAeoB,QAAf,EAAjB;;AAEA;;AAEA,oBAAMgD,mBAAmB;AACrB1D,8BAAQyB,QADa;AAErBJ,wBAAIA,EAFiB;AAGrBrC,4BAAQ,IAHa;AAIrB6C,qCAAiB;;AAGrB;AAPyB,iBAAzB,CAQA,OAAKtD,WAAL,GAAmB,OAAKA,WAAL,CAAiB6E,GAAjB,CAAqB3B,QAArB,EAA+BiC,gBAA/B,CAAnB;;AAGA;;AAEArC,mBAAGoC,EAAH,CAAM,SAAN,EAAiB,UAAChF,GAAD,EAAS;;AAEtB;;AAEA,wBAAM8C,UAAU,OAAKoC,aAAL,CAAmBlF,GAAnB,CAAhB;AACA,2BAAKmF,QAAL,CAAcnC,QAAd,EAAwBF,OAAxB;;AAEA;AAEH,iBATD;;AAYAF,mBAAGoC,EAAH,CAAM,OAAN,EAAe,YAAM;;AAEjB;;;AAGA,wBAAMI,kBAAkB,OAAKtF,WAAL,CAAiBoC,GAAjB,CAAqBc,QAArB,CAAxB;AACA,wBAAMzC,SAASsB,iBAAEI,QAAF,CAAWJ,iBAAEK,GAAF,CAAMkD,eAAN,EAAuB,QAAvB,EAAiC,IAAjC,CAAX,CAAf;;AAEA;AACA,2BAAKtF,WAAL,GAAmB,OAAKA,WAAL,CAAiBuF,MAAjB,CAAwBrC,QAAxB,CAAnB;;AAEA,wBAAIzC,MAAJ,EAAY;AACR;;AAEA,4BAAM+E,kBAAkB,OAAKxF,WAAL,CAAiBuC,MAAjB,CAAwB,UAACC,GAAD;AAAA,mCAAST,iBAAEI,QAAF,CAAWJ,iBAAEK,GAAF,CAAMI,GAAN,EAAW,QAAX,CAAX,MAAqC/B,MAA9C;AAAA,yBAAxB,CAAxB;AACA,4BAAI+E,gBAAgB9C,IAAhB,KAAyB,CAA7B,EAAgC;;AAE5B;;AAEA,mCAAKqC,aAAL,CAAmBtE,MAAnB,EAA2B;AACvB0C,wCAAQ,cADe;AAEvBC,yCAAS3C;AAFc,6BAA3B;;AAKA;;AAEA,mCAAKV,GAAL,CAASwD,MAAT,CAAgBe,IAAhB,CAAqBU,gBAArB,CAAsCvE,MAAtC,EAA8C,KAA9C;AACH;AACJ;AAGJ,iBA/BD;AAgCH,aA/DD;AAgEH;;;;;;kBAjZgBX,U","file":"connection.js","sourcesContent":["import {OrderedMap} from 'immutable'\nimport {ObjectID} from 'mongodb'\nimport _ from 'lodash'\n\nexport default class Connection {\n\n    constructor(app) {\n\n        this.app = app;\n\n        this.connections = OrderedMap();\n\n        this.modelDidLoad();\n    }\n\n\n    decodeMesasge(msg) {\n\n\n        let messageObject = null;\n\n\n        try {\n\n            messageObject = JSON.parse(msg);\n        }\n        catch (err) {\n\n            console.log(\"An error decode the socket mesage\", msg);\n        }\n\n\n        return messageObject;\n\n    }\n\n    sendToMembers(userId, obj) {\n\n        const query = [\n            {\n                $match: {\n\n                    members: {$all: [new ObjectID(userId)]}\n                }\n            },\n            {\n\n                $lookup: {\n\n                    from: 'users',\n                    localField: 'members',\n                    foreignField: '_id',\n                    as: 'users'\n                }\n            },\n            {\n                $unwind: {\n\n                    path: '$users'\n                }\n            },\n            {\n                $match: {'users.online': {$eq: true}}\n            },\n            {\n                $group: {\n\n                    _id: \"$users._id\"\n                }\n            }\n\n\n        ];\n\n\n        const users = [];\n\n\n        this.app.db.collection('channels').aggregate(query, (err, results) => {\n\n\n           // console.log(\"found members array who is chattting with current user\", results);\n            if (err === null && results) {\n\n                _.each(results, (result) => {\n\n\n                    const uid = _.toString(_.get(result, '_id'));\n                    if (uid) {\n                        users.push(uid);\n                    }\n                });\n\n\n                // this is list of all connections is chatting with current user\n                const memberConnections = this.connections.filter((con) => _.includes(users, _.toString(_.get(con, 'userId'))));\n                if (memberConnections.size) {\n\n                    memberConnections.forEach((connection, key) => {\n\n                        const ws = connection.ws;\n                        this.send(ws, obj);\n                    });\n                }\n\n\n            }\n        })\n    }\n\n    sendAll(obj) {\n\n\n        // send socket messages to all clients.\n\n        this.connections.forEach((con, key) => {\n            const ws = con.ws;\n\n            this.send(ws, obj);\n        });\n    }\n\n    send(ws, obj) {\n\n        const message = JSON.stringify(obj);\n\n        ws.send(message);\n    }\n\n    doTheJob(socketId, msg) {\n\n\n        const action = _.get(msg, 'action');\n        const payload = _.get(msg, 'payload');\n        const userConnection = this.connections.get(socketId);\n\n        console.log(\"Got message\", msg);\n        \n        switch (action) {\n\n\n            case 'create_message':\n\n                if (userConnection.isAuthenticated) {\n                    let messageObject = payload;\n\n                    messageObject.userId = _.get(userConnection, 'userId');\n                    console.log(\"Got message from client about creating new message\", payload);\n\n                    this.app.models.message.create(messageObject).then((message) => {\n\n\n                        console.log(\"Mesage crewated\", message);\n\n                        const channelId = _.toString(_.get(message, 'channelId'));\n                        this.app.models.channel.load(channelId).then((channel) => {\n\n                            // console.log(\"got channel of the message created\", channel);\n\n                            const memberIds = _.get(channel, 'members', []);\n\n                            _.each(memberIds, (memberId) => {\n\n                                memberId = _.toString(memberId);\n\n                                const memberConnections = this.connections.filter((c) => _.toString(c.userId) === memberId);\n\n\n                                memberConnections.forEach((connection) => {\n\n\n                                    const ws = connection.ws;\n\n                                    this.send(ws, {\n\n                                        action: 'message_added',\n                                        payload: message,\n                                    })\n\n\n                                })\n\n\n                            });\n                        })\n\n                        // message created successful.\n\n\n                    }).catch(err => {\n\n\n                        // send back to the socket client who sent this messagse with error\n                        const ws = userConnection.ws;\n                        this.send(ws, {\n                            action: 'create_message_error',\n                            payload: payload,\n                        })\n                    })\n                }\n\n\n                break;\n            case 'create_channel':\n\n                let channel = payload;\n\n\n                const userId = userConnection.userId;\n                channel.userId = userId;\n\n                this.app.models.channel.create(channel).then((chanelObject) => {\n\n                    // successful created channel ,\n\n                    console.log(\"Succesful created new channel\", typeof userId, chanelObject);\n\n                    // let send back to all members in this channel  with new channel  created\n                    let memberConnections = [];\n\n                    const memberIds = _.get(chanelObject, 'members', []);\n\n                    // fetch all users has memberId\n\n                    const query = {\n                        _id: {$in: memberIds}\n                    };\n\n                    const queryOptions = {\n                        _id: 1,\n                        name: 1,\n                        created: 1,\n                    }\n\n                    this.app.models.user.find(query, queryOptions).then((users) => {\n                        chanelObject.users = users;\n\n\n                        _.each(memberIds, (id) => {\n\n                            const userId = id.toString();\n                            const memberConnection = this.connections.filter((con) => `${con.userId}` === userId);\n\n                            if (memberConnection.size) {\n                                memberConnection.forEach((con) => {\n\n                                    const ws = con.ws;\n                                    const obj = {\n                                        action: 'channel_added',\n                                        payload: chanelObject,\n                                    }\n\n                                    // send to socket client matching userId in channel members.\n                                    this.send(ws, obj);\n\n                                })\n\n\n                            }\n\n\n                        });\n\n                    });\n\n\n                    //const memberConnections = this.connections.filter((con) => `${con.userId}` = )\n\n\n                });\n\n                //console.log(\"Got new channel need to be created form client\", channel);\n\n\n                break;\n\n            case 'auth':\n\n                const userTokenId = payload;\n                let connection = this.connections.get(socketId);\n\n                if (connection) {\n\n\n\n                    // let find user with this token and verify it.\n\n                    this.app.models.token.loadTokenAndUser(userTokenId).then((token) => {\n\n                        const userId = token.userId;\n\n                        connection.isAuthenticated = true;\n                        connection.userId = `${userId}`;\n\n                        this.connections = this.connections.set(socketId, connection);\n\n                        // now send back to the client you are verified.\n                        const obj = {\n                            action: 'auth_success',\n                            payload: 'You are verified',\n                        }\n                        this.send(connection.ws, obj);\n\n                        //send to all socket clients connection\n\n                        const userIdString = _.toString(userId);\n                        this.sendToMembers(userIdString, {\n                            action: 'user_online',\n                            payload: userIdString,\n                        });\n\n                        this.app.models.user.updateUserStatus(userIdString, true);\n\n\n                    }).catch((err) => {\n\n\n                        // send back to socket client you are not logged.\n                        const obj = {\n                            action: 'auth_error',\n                            payload: \"An error authentication your account: \" + userTokenId\n                        };\n\n                        this.send(connection.ws, obj);\n\n                    })\n\n\n                }\n\n\n                break;\n\n            default:\n\n                break;\n        }\n    }\n\n    modelDidLoad() {\n\n        this.app.wss.on('connection', (ws) => {\n\n            const socketId = new ObjectID().toString();\n\n            //console.log(\"Somone connected to the server via socket.\", socketId)\n\n            const clientConnection = {\n                _id: `${socketId}`,\n                ws: ws,\n                userId: null,\n                isAuthenticated: false,\n            }\n\n            // save this connection client to cache.\n            this.connections = this.connections.set(socketId, clientConnection);\n\n\n            // listen any message from websocket client.\n\n            ws.on('message', (msg) => {\n\n                //console.log(\"SERVER: message from a client\", msg);\n\n                const message = this.decodeMesasge(msg);\n                this.doTheJob(socketId, message);\n\n                //console.log(\"SERVER: message from a client\", msg);\n\n            });\n\n\n            ws.on('close', () => {\n\n                //console.log(\"Someone disconnected to the server\", socketId);\n\n\n                const closeConnection = this.connections.get(socketId);\n                const userId = _.toString(_.get(closeConnection, 'userId', null));\n\n                // let remove this socket client from the cache collection.\n                this.connections = this.connections.remove(socketId);\n\n                if (userId) {\n                    // now find all socket clients matching with userId\n\n                    const userConnections = this.connections.filter((con) => _.toString(_.get(con, 'userId')) === userId);\n                    if (userConnections.size === 0) {\n\n                        // this mean no more socket clients is online with this userId. now user is offline.\n\n                        this.sendToMembers(userId, {\n                            action: 'user_offline',\n                            payload: userId\n                        });\n\n                        // update user status into database\n\n                        this.app.models.user.updateUserStatus(userId, false);\n                    }\n                }\n\n\n            });\n        });\n    }\n}"]}