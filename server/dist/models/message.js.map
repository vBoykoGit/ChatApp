{"version":3,"sources":["../../src/models/message.js"],"names":["Message","app","messages","OrderedMap","channelId","limit","offset","Promise","resolve","reject","ObjectID","query","$lookup","from","localField","foreignField","as","$match","$eq","$project","_id","user","$arrayElemAt","userId","body","created","name","online","$limit","$skip","$sort","db","collection","aggregate","err","results","obj","id","_","get","toString","message","Date","insertOne","info","findOneAndUpdate","$set","lastMessage","updated","models","load","then","unset","catch"],"mappings":"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","file":"message.js","sourcesContent":["import _ from 'lodash'\nimport {OrderedMap} from 'immutable'\nimport {ObjectID} from 'mongodb'\n\nexport default class Message {\n\n    constructor(app) {\n        this.app = app;\n        this.messages = new OrderedMap();\n    }\n\n    getChannelMessages(channelId, limit = 50, offset = 0){\n\n        return new Promise((resolve, reject) => {\n\n            channelId = new ObjectID(channelId);\n\n            const query = [\n                {\n\n                    $lookup: {\n                        from: 'users',\n                        localField: 'userId',\n                        foreignField: '_id',\n                        as: 'user'\n                    }\n                },\n                {\n                    $match: {\n                        'channelId': {$eq: channelId},\n                    },\n                },\n                {\n\n                    $project: {\n                        _id: true,\n                        channelId: true,\n                        user: {$arrayElemAt: ['$user', 0]},\n                        userId: true,\n                        body: true,\n                        created: true,\n                    }\n                },\n                {\n                    $project: {\n                        _id: true,\n                        channelId: true,\n                        user: {_id: true, name: true, created: true, online: true},\n                        userId: true,\n                        body: true,\n                        created: true,\n                    }\n                },\n                {\n                    $limit: limit\n                },\n                {\n                    $skip: offset,\n                },\n                {\n                    $sort: {created: -1}\n                }\n\n            ];\n\n\n            this.app.db.collection('messages').aggregate(query, (err, results) => {\n\n                \n\n                return err ? reject(err): resolve(results)\n\n            });\n\n\n        })\n    }\n    create(obj) {\n\n\n        return new Promise((resolve, reject) => {\n\n\n            let id = _.get(obj, '_id', null);\n            id = _.toString(id);\n\n            const userId = new ObjectID(_.get(obj, 'userId'));\n            const channelId = new ObjectID(_.get(obj, 'channelId'));\n\n            const message = {\n                _id: new ObjectID(id),\n                body: _.get(obj, 'body', ''),\n                userId: userId,\n                channelId: channelId,\n                created: new Date(),\n            };\n\n\n            this.app.db.collection('messages').insertOne(message, (err, info) => {\n\n                if(err){\n                    return reject(err);\n                }\n\n\n                // let update lastMessgage field to channel\n                this.app.db.collection('channels').findOneAndUpdate({_id: channelId}, {\n                    $set: {\n                        lastMessage: _.get(message, 'body', ''),\n                        updated: new Date(),\n                    }\n                })\n\n                this.app.models.user.load(_.toString(userId)).then((user) => {\n\n                    _.unset(user, 'password');\n                    _.unset(user, 'email');\n                    message.user = user;\n\n\n                    return resolve(message);\n\n                }).catch((err) => {\n\n                    return reject(err);\n                });\n            });\n\n\n        });\n    }\n\n}"]}