{"version":3,"sources":["../src/app-router.js"],"names":["START_TIME","Date","AppRouter","app","setupRouter","bind","console","log","post","req","res","next","body","models","user","create","then","_","unset","status","json","catch","error","err","get","tokenId","token","loadTokenAndUser","keyword","search","results","userId","load","login","channelId","message","channel","members","query","_id","$in","options","name","created","find","users","filter","JSON","parse","toString","limit","offset","c","memberIds","each","id","push","includes","getChannelMessages","messages","$lookup","from","localField","foreignField","as","$match","$all","$project","title","lastMessage","updated","online","$sort","$limit","aggregate","channels","logout"],"mappings":"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","file":"app-router.js","sourcesContent":["import moment from 'moment';\nimport _ from 'lodash'\n\n\nexport const START_TIME = new Date();\n\nexport default class AppRouter {\n\n\n    constructor(app) {\n\n        this.app = app;\n\n\n        this.setupRouter = this.setupRouter.bind(this);\n\n\n        this.setupRouter();\n    }\n\n    setupRouter() {\n\n        const app = this.app;\n\n        console.log(\"APp ROuter works!\");\n\n\n\n        /**\n         * @endpoint: /api/users\n         * @method: POST\n         **/\n        app.post('/api/users', (req, res, next) => {\n\n            const body = req.body;\n\n            app.models.user.create(body).then((user) => {\n\n                _.unset(user, 'password');\n\n                return res.status(200).json(user);\n\n            }).catch(err => {\n\n\n                return res.status(503).json({error: err});\n            })\n\n\n        });\n\n\n        /**\n         * @endpoint: /api/users/me\n         * @method: GET\n         **/\n\n        app.get('/api/users/me', (req, res, next) => {\n\n            let tokenId = req.get('authorization');\n\n            if (!tokenId) {\n                // get token from query\n\n                tokenId = _.get(req, 'query.auth');\n            }\n\n\n            app.models.token.loadTokenAndUser(tokenId).then((token) => {\n                _.unset(token, 'user.password');\n\n                return res.json(token);\n\n            }).catch(err => {\n\n                return res.status(401).json({\n                    error: err\n                })\n            });\n\n\n        });\n\n\n        /**\n         * @endpoint: /api/users/search\n         * @method: POST\n         **/\n\n        app.post('/api/users/search', (req, res, next) => {\n\n\n            const keyword = _.get(req, 'body.search', '');\n\n            app.models.user.search(keyword).then((results) => {\n\n\n                return res.status(200).json(results);\n            }).catch((err) => {\n\n                return res.status(404).json({\n                    error: 'Not found.'\n                })\n            })\n\n        });\n\n\n        /**\n         * @endpoint: /api/users/:id\n         * @method: GET\n         **/\n\n        app.get('/api/users/:id', (req, res, next) => {\n\n            const userId = _.get(req, 'params.id');\n\n\n            app.models.user.load(userId).then((user) => {\n\n                _.unset(user, 'password');\n\n                return res.status(200).json(user);\n            }).catch(err => {\n\n                return res.status(404).json({\n                    error: err,\n                })\n            })\n\n\n        });\n\n\n        /**\n         * @endpoint: /api/users/login\n         * @method: POST\n         **/\n\n        app.post('/api/users/login', (req, res, next) => {\n\n            const body = _.get(req, 'body');\n\n\n            app.models.user.login(body).then((token) => {\n\n\n                _.unset(token, 'user.password');\n\n                return res.status(200).json(token);\n\n\n            }).catch(err => {\n\n                return res.status(401).json({\n                    error: err\n                })\n            })\n\n        })\n\n\n        /**\n         * @endpoint: /api/channels/:id\n         * @method: GET\n         **/\n\n\n        app.get('/api/channels/:id', (req, res, next) => {\n\n            const channelId = _.get(req, 'params.id');\n\n            console.log(channelId);\n\n            if (!channelId) {\n\n                return res.status(404).json({error: {message: \"Not found.\"}});\n            }\n\n\n            app.models.channel.load(channelId).then((channel) => {\n\n                // fetch all uses belong to memberId\n\n                const members = channel.members;\n                const query = {\n                    _id: {$in: members}\n                };\n                const options = {_id: 1, name: 1, created: 1};\n\n                app.models.user.find(query, options).then((users) => {\n                    channel.users = users;\n\n                    return res.status(200).json(channel);\n                }).catch(err => {\n\n                    return res.status(404).json({error: {message: \"Not found.\"}});\n\n                });\n\n\n            }).catch((err) => {\n\n                return res.status(404).json({error: {message: \"Not found.\"}});\n            })\n\n\n        });\n\n\n        /**\n         * @endpoint: /api/channels/:id/messages\n         * @method: GET\n         **/\n\n        app.get('/api/channels/:id/messages', (req, res, next) => {\n\n\n            let tokenId = req.get('authorization');\n\n            if (!tokenId) {\n                // get token from query\n\n                tokenId = _.get(req, 'query.auth');\n            }\n\n\n            app.models.token.loadTokenAndUser(tokenId).then((token) => {\n\n\n                const userId = token.userId;\n\n\n                // make sure user are logged in\n                // check if this user is inside of channel members. other retun 401.\n\n                let filter = _.get(req, 'query.filter', null);\n                if (filter) {\n\n                    filter = JSON.parse(filter);\n                    console.log(filter);\n                }\n\n                const channelId = _.toString(_.get(req, 'params.id'));\n                const limit = _.get(filter, 'limit', 50);\n                const offset = _.get(filter, 'offset', 0);\n\n\n                // load channel\n\n                this.app.models.channel.load(channelId).then((c) => {\n\n\n                    const memberIds = _.get(c, 'members');\n\n                    const members = [];\n\n                    _.each(memberIds, (id) => {\n                        members.push(_.toString(id));\n                    })\n\n\n                    if (!_.includes(members, _.toString(userId))) {\n\n                        return res.status(401).json({error: {message: \"Access denied\"}});\n                    }\n\n                    this.app.models.message.getChannelMessages(channelId, limit, offset).then((messages) => {\n\n\n                        return res.status(200).json(messages);\n\n                    }).catch((err) => {\n\n                        return res.status(404).json({error: {message: \"Not found.\"}});\n                    })\n\n\n                }).catch((err) => {\n\n                    return res.status(404).json({error: {message: \"Not found.\"}});\n\n                })\n\n\n            }).catch((err) => {\n\n\n                return res.status(401).json({error: {message: \"Access denied\"}});\n\n\n            });\n\n\n        });\n\n\n        /**\n         * @endpoint: /api/me/channels\n         * @method: GET\n         **/\n\n        app.get('/api/me/channels', (req, res, next) => {\n\n\n            let tokenId = req.get('authorization');\n\n            if (!tokenId) {\n                // get token from query\n\n                tokenId = _.get(req, 'query.auth');\n            }\n\n\n            app.models.token.loadTokenAndUser(tokenId).then((token) => {\n\n\n                const userId = token.userId;\n\n\n                const query = [\n\n                    {\n                        $lookup: {\n                            from: 'users',\n                            localField: 'members',\n                            foreignField: '_id',\n                            as: 'users',\n                        }\n                    },\n                    {\n                        $match: {\n                            members: {$all: [userId]}\n                        }\n                    },\n                    {\n                        $project: {\n                            _id: true,\n                            title: true,\n                            lastMessage: true,\n                            created: true,\n                            updated: true,\n                            userId: true,\n                            users: {\n                                _id: true,\n                                name: true,\n                                created: true,\n                                online: true\n                            },\n                            members: true,\n                        }\n                    },\n                    {\n                        $sort: {updated: -1, created: -1}\n                    },\n                    {\n                        $limit: 50,\n                    }\n                ];\n\n                app.models.channel.aggregate(query).then((channels) => {\n\n\n                    return res.status(200).json(channels);\n\n\n                }).catch((err) => {\n\n                    return res.status(404).json({error: {message: \"Not found.\"}});\n                })\n\n\n            }).catch(err => {\n\n                return res.status(401).json({\n                    error: \"Access denied.\"\n                })\n            });\n\n\n        });\n\n\n\n\n        /**\n         * @endpoint: /api/me/logout\n         * @method: GET\n         **/\n\n        app.get('/api/me/logout', (req, res, next) => {\n\n            let tokenId = req.get('authorization');\n\n            if (!tokenId) {\n                // get token from query\n\n                tokenId = _.get(req, 'query.auth');\n            }\n\n\n            app.models.token.loadTokenAndUser(tokenId).then((token) => {\n\n\n                app.models.token.logout(token);\n\n                return res.status(200).json({\n                    message: 'Successful.'\n                });\n\n            }).catch(err => {\n\n\n                return res.status(401).json({error: {message: 'Access denied'}});\n            })\n\n\n\n        })\n\n\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}